import telebot
from telebot import types
import sqlite3
import random

# ü§ñ –®–∫–æ–ª—å–Ω—ã–π –±–æ—Ç üëªAomineüëª: –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –¥–æ–º–∞—à–∫–µ, –ì–î–ó –∏ —Å–æ–±—Ä–∞–Ω–∏—è–º! üöÄ

TOKEN = "8104233343:AAEf6EqGoymy2swH4Ra0bpYZFIHEIiAnKbM"
bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect("school_bot.db", check_same_thread=False)
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü—ã
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT UNIQUE,
    password TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    day TEXT,
    time TEXT,
    lesson TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS homework (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    lesson TEXT,
    task TEXT,
    answer TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS meetings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    time TEXT,
    topic TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    text TEXT
)''')
conn.commit()

# –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
predefined_schedule = [
    ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "08:00", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
    ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "09:45", "–§–∏–∑–∏–∫–∞"),
    ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "11:30", "–ò—Å—Ç–æ—Ä–∏—è"),
    ("–í—Ç–æ—Ä–Ω–∏–∫", "08:00", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"),
    ("–í—Ç–æ—Ä–Ω–∏–∫", "09:45", "–•–∏–º–∏—è"),
    ("–°—Ä–µ–¥–∞", "08:00", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"),
    ("–°—Ä–µ–¥–∞", "09:45", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
    ("–ß–µ—Ç–≤–µ—Ä–≥", "08:00", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"),
    ("–ß–µ—Ç–≤–µ—Ä–≥", "09:45", "–ë–∏–æ–ª–æ–≥–∏—è"),
    ("–ü—è—Ç–Ω–∏—Ü–∞", "08:00", "–ò—Å—Ç–æ—Ä–∏—è"),
    ("–ü—è—Ç–Ω–∏—Ü–∞", "09:45", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
]
predefined_homework = [
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 5-10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 45", "–û—Ç–≤–µ—Ç: 35, 45, 60, 75, 90"),
    ("–§–∏–∑–∏–∫–∞", "–í—ã—É—á–∏—Ç—å –∑–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞", "–û—Ç–≤–µ—Ç: –ó–∞–∫–æ–Ω 1, –ó–∞–∫–æ–Ω 2, –ó–∞–∫–æ–Ω 3"),
    ("–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ 12", "–û—Ç–≤–µ—Ç: –î—Ä–µ–≤–Ω–∏–π –†–∏–º"),
    ("–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ß–µ—Ö–æ–≤–∞", "–û—Ç–≤–µ—Ç: –°–æ—á–∏–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 3 —á–∞—Å—Ç—è—Ö"),
    ("–•–∏–º–∏—è", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π", "–û—Ç–≤–µ—Ç: –†–µ–∞–∫—Ü–∏—è –æ—Å–∞–∂–¥–µ–Ω–∏—è"),
    ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–í—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ —Ç–µ–º—É 'Family'", "–û—Ç–≤–µ—Ç: 15 —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥"),
    ("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –º–∏—Ä–∞", "–û—Ç–≤–µ—Ç: –í—Å–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã –∏ –æ–∫–µ–∞–Ω—ã"),
    ("–ë–∏–æ–ª–æ–≥–∏—è", "–í—ã—É—á–∏—Ç—å —Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏", "–û—Ç–≤–µ—Ç: –†–∏—Å—É–Ω–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
]
cursor.executemany("INSERT OR IGNORE INTO schedule (day, time, lesson) VALUES (?, ?, ?)", predefined_schedule)
cursor.executemany("INSERT OR IGNORE INTO homework (lesson, task, answer) VALUES (?, ?, ?)", predefined_homework)
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        types.KeyboardButton("üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"),
        types.KeyboardButton("üìö –ì–î–ó"),
        types.KeyboardButton("üì¢ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è"),
        types.KeyboardButton("üéÆ –ò–≥—Ä—ã"),
        types.KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"),
        types.KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        types.KeyboardButton("ü§ñ –ü–æ–º–æ—â–Ω–∏–∫"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup

user_data = {}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(message, process_login)

def process_login(message):
    username = message.text
    user_data[message.chat.id] = {"username": username}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_password)

def process_password(message):
    password = message.text
    chat_id = message.chat.id
    username = user_data[chat_id]["username"]
    cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()

    if user:
        bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!", reply_markup=main_menu())
    else:
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username, password) VALUES (?, ?, ?)", (chat_id, username, password))
        conn.commit()
        bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(func=lambda m: m.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def view_schedule(message):
    cursor.execute("SELECT DISTINCT day, time, lesson FROM schedule ORDER BY day, time")
    records = cursor.fetchall()
    response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    days = {}
    for day, time, lesson in records:
        days.setdefault(day, []).append(f"{time} - {lesson}")
    for day, lessons in days.items():
        response += f"\n{day}:\n" + "\n".join(lessons) + "\n"
    bot.send_message(message.chat.id, response, reply_markup=main_menu())

# –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@bot.message_handler(func=lambda m: m.text == "üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
def view_homework(message):
    cursor.execute("SELECT DISTINCT lesson, task, answer FROM homework")
    records = cursor.fetchall()
    response = "üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
    for lesson, task, answer in records:
        response += f"{lesson}: {task}\n–û—Ç–≤–µ—Ç: {answer}\n\n"
    bot.send_message(message.chat.id, response, reply_markup=main_menu())

# –ì–î–ó
gdz_answers = {
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ó–∞–¥–∞—á–∞ 3, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 45. –û—Ç–≤–µ—Ç: 345.",
    "—Ñ–∏–∑–∏–∫–∞": "–ó–∞–¥–∞—á–∞ 5, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 12. –û—Ç–≤–µ—Ç: 12.5 –ù.",
    "—Ö–∏–º–∏—è": "–ó–∞–¥–∞—á–∞ 2, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 88. –û—Ç–≤–µ—Ç: 0.5 –º–æ–ª—å.",
    "–∏—Å—Ç–æ—Ä–∏—è": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ 5, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 20. –û—Ç–≤–µ—Ç: –î—Ä–µ–≤–Ω–∏–π –†–∏–º.",
    "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–ß–µ—Ö–æ–≤, —Ä–∞—Å—Å–∫–∞–∑ '–•–∞–º–µ–ª–µ–æ–Ω'. –ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è: –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å –ª—é–¥—Å–∫–æ–π –Ω–∞—Ç—É—Ä—ã."
}

@bot.message_handler(func=lambda m: m.text == "üìö –ì–î–ó")
def gdz_request(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subject in gdz_answers:
        markup.add(subject.capitalize())
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text.lower() in gdz_answers)
def gdz_answer(message):
    bot.send_message(message.chat.id, gdz_answers[message.text.lower()], reply_markup=main_menu())

# –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è
@bot.message_handler(func=lambda m: m.text == "üì¢ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è")
def view_meetings(message):
    cursor.execute("SELECT DISTINCT date, time, topic FROM meetings ORDER BY date")
    meetings = cursor.fetchall()
    if meetings:
        response = "üì¢ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è:\n" + "\n".join(f"{d} {t} ‚Äì {topic}" for d, t, topic in meetings)
    else:
        response = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–∏–π."
    bot.send_message(message.chat.id, response, reply_markup=main_menu())

# üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞
@bot.message_handler(func=lambda m: m.text == "üéÆ –ò–≥—Ä—ã")
def start_game(message):
    subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è"]
    chosen = random.choice(subjects).lower()
    user_data[message.chat.id] = {"game_answer": chosen}
    bot.send_message(message.chat.id, "üé≤ –Ø –∑–∞–≥–∞–¥–∞–ª —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. –£–≥–∞–¥–∞–π –∫–∞–∫–æ–π!")

@bot.message_handler(func=lambda m: "game_answer" in user_data.get(m.chat.id, {}))
def check_guess(message):
    if message.text.lower() == user_data[message.chat.id]["game_answer"]:
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!", reply_markup=main_menu())
        user_data[message.chat.id].pop("game_answer")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# üìù –¢–µ—Å—Ç
@bot.message_handler(commands=['test'])
def test_question(message):
    bot.send_message(message.chat.id, "‚ùì –ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?\n–ê) –ü—É—à–∫–∏–Ω\n–ë) –¢–æ–ª—Å—Ç–æ–π\n–í) –ß–µ—Ö–æ–≤")

@bot.message_handler(func=lambda m: m.text in ["–ê", "–ë", "–í"])
def test_answer(message):
    if message.text == "–ë":
        bot.send_message(message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ! –¢–æ–ª—Å—Ç–æ–π.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–≤–µ—Ç: –¢–æ–ª—Å—Ç–æ–π.")

# ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def add_reminder(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    bot.register_next_step_handler(message, save_reminder)

def save_reminder(message):
    cursor.execute("INSERT INTO reminders (user_id, text) VALUES (?, ?)", (message.chat.id, message.text))
    conn.commit()
    bot.send_message(message.chat.id, "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=main_menu())

# üí¨ –¶–∏—Ç–∞—Ç—ã
quotes = [
    "–£—á–µ–Ω—å–µ ‚Äî —Å–≤–µ—Ç, –∞ –Ω–µ—É—á–µ–Ω—å–µ ‚Äî —Ç—å–º–∞.",
    "–ó–Ω–∞–Ω–∏–µ ‚Äî —Å–∏–ª–∞.",
    "–ö–Ω–∏–≥–∞ ‚Äî –ª—É—á—à–∏–π –¥—Ä—É–≥ —á–µ–ª–æ–≤–µ–∫–∞.",
    "–û—à–∏–±–∫–∏ ‚Äî –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É."
]

@bot.message_handler(func=lambda m: m.text == "üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è")
def quote_of_the_day(message):
    bot.send_message(message.chat.id, random.choice(quotes), reply_markup=main_menu())

# ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ (–∑–∞–≥–ª—É—à–∫–∞)
@bot.message_handler(func=lambda m: m.text == "ü§ñ –ü–æ–º–æ—â–Ω–∏–∫")
def ai_assistant(message):
    bot.send_message(message.chat.id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, simple_ai)

def simple_ai(message):
    question = message.text.lower()
    if "–¥–æ–º–∞—à–∫–∞" in question:
        bot.send_message(message.chat.id, "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!")
    elif "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in question:
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä–æ–π üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –≤—Å—ë –ø–æ–Ω–∏–º–∞—é. –Ø —É—á—É—Å—å üòä")

# –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
bot.polling(none_stop=True)
