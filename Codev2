from builtins import ValueError, int

import telebot
from telebot import types
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "8104233343:AAEf6EqGoymy2swH4Ra0bpYZFIHEIiAnKbM"
bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}
homework = {
    'Monday': {'Math': 'Exercise 1', 'English': 'Write a paragraph', 'Physics': 'Study chapter 2'},
    'Tuesday': {'Biology': 'Prepare for quiz', 'Chemistry': 'Write a lab report', 'Geography': 'Read chapter 3'},
    'Wednesday': {'Math': 'Solve problems 1-10', 'PE': 'Prepare presentation', 'Music': 'Practice piano'},
    'Thursday': {'Physics': 'Read chapter 5', 'Chemistry': 'Complete worksheet', 'Biology': 'Study for test'},
    'Friday': {'History': 'Write essay', 'Art': 'Complete drawing', 'Math': 'Review equations'}
}

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
schedule = {
    'Monday': ['Math', 'English', 'Physics', 'History'],
    'Tuesday': ['Biology', 'Chemistry', 'Geography', 'Art'],
    'Wednesday': ['Math', 'PE', 'Music', 'History'],
    'Thursday': ['Physics', 'Chemistry', 'Biology', 'English'],
    'Friday': ['History', 'Art', 'Math', 'PE']
}

# –¶–∏—Ç–∞—Ç—ã
quotes = [
    "–°–µ–∫—Ä–µ—Ç –ø–µ—Ä–µ–º–µ–Ω –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å –≤—Å—é —ç–Ω–µ—Ä–≥–∏—é –Ω–µ –Ω–∞ –±–æ—Ä—å–±–µ —Å–æ —Å—Ç–∞—Ä—ã–º, –∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ.",
    "–ë—É–¥—å —Å–æ–±–æ–π, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.",
    "–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Å—á–∞—Å—Ç—å–µ –≤ –∂–∏–∑–Ω–∏ ‚Äî —ç—Ç–æ –±—ã—Ç—å –ª—é–±–∏–º—ã–º –∏ –ª—é–±–∏—Ç—å.",
    "–ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–∞—Ç—å—Å—è, –∫–∞–∂–¥—ã–π –¥–µ–ª–∞–µ—Ç –æ—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –Ω–∞—É—á–∏—Ç—å—Å—è.",
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.",
    "–°—É–¥—å–±–∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–∞, –∏ –≤—Å–µ –≤ –∂–∏–∑–Ω–∏ –∏–º–µ–µ—Ç —Å–≤–æ–π —Å–º—ã—Å–ª.",
    "–°–º–µ–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–∞—Ö–∞, –∞ —É–º–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–≥–æ.",
    "–ö–æ–≥–¥–∞ —Ç—ã –ø–µ—Ä–µ—Å—Ç–∞–µ—à—å –±–æ—è—Ç—å—Å—è, —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º."
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"),
        types.KeyboardButton("üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"),
        types.KeyboardButton("üì¢ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è"),
        types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"),
        types.KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç—ã"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, process_name)


def process_name(message):
    name = message.text
    user_data[message.chat.id] = {"name": name}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
    bot.register_next_step_handler(message, process_class)


def process_class(message):
    user_class = message.text
    user_data[message.chat.id]["class"] = user_class
    bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu())


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def view_schedule(message):
    response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    for day, subjects in schedule.items():
        response += f"{day}: {', '.join(subjects)}\n"

    bot.send_message(message.chat.id, response, reply_markup=main_menu())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def add_lesson(message):
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞):")
    bot.register_next_step_handler(message, save_lesson)


def save_lesson(message):
    try:
        day, subject = message.text.split(" ", 1)
        if day.capitalize() in schedule:
            schedule[day.capitalize()].append(subject)
            bot.send_message(message.chat.id, f"–ó–∞–Ω—è—Ç–∏–µ '{subject}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {day}.", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, save_lesson)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, save_lesson)


# –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üìñ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
def view_homework(message):
    response = "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    for day, tasks in homework.items():
        response += f"{day}:\n"
        for subject, task in tasks.items():
            response += f"{subject}: {task}\n"
    bot.send_message(message.chat.id, response, reply_markup=main_menu())


# –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üì¢ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è")
def parent_meetings(message):
    meetings = {
        'Monday': 'Parent meeting for class 10A at 6 PM',
        'Wednesday': 'Parent meeting for class 10B at 5 PM',
        'Friday': 'Parent meeting for class 10C at 7 PM'
    }

    response = "üìÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è:\n"
    for day, info in meetings.items():
        response += f"{day}: {info}\n"
    bot.send_message(message.chat.id, response, reply_markup=main_menu())


# –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(func=lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def my_profile(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        name = user_data[chat_id].get("name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        user_class = user_data[chat_id].get("class", "–ù–µ —É–∫–∞–∑–∞–Ω")
        response = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name}\n–ö–ª–∞—Å—Å: {user_class}"
    else:
        response = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

    bot.send_message(message.chat.id, response, reply_markup=main_menu())


# –ú–∏–Ω–∏-–∏–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
@bot.message_handler(func=lambda message: message.text == "üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
def guess_number(message):
    bot.send_message(message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")
    random_number = random.randint(1, 10)
    bot.register_next_step_handler(message, check_guess, random_number)


def check_guess(message, random_number):
    try:
        user_guess = int(message.text)
        if user_guess == random_number:
            bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {random_number}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.", reply_markup=main_menu())


# –¶–∏—Ç–∞—Ç—ã
@bot.message_handler(func=lambda message: message.text == "üí¨ –¶–∏—Ç–∞—Ç—ã")
def send_quote(message):
    quote = random.choice(quotes)
    bot.send_message(message.chat.id, quote, reply_markup=main_menu())


# –§—É–Ω–∫—Ü–∏—è "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def back_to_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
